version: '2.1'

services:
  product:
    build: micoroservices/product-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  recommendation:
    build: micoroservices/recommendation-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    build: micoroservices/review-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    build: micoroservices/product-composite-service
    mem_limit: 350m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:latest
    mem_limit: 350m
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=tnals12@
      - POSTGRES_DB=simple

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: library/rabbitmq:3.7.8-management
    mem_limit: 350m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD","rabbitmqctl","status"]
      interval: 10s
      timeout: 5s
      retries: 10


